// SPDX-License-Identifier: Unlicense
#pragma once

#include <windows.h>

// WinRing0 & HwrwDrv
#define OLS_TYPE 40000

// HwRwDrv.sys
#define HWRWDRV_ID							L"HwRwDrv"
#define HWRWDRV_NAME						L"HwRwDrv.sys"
#define HWRWDRV_NAME_X64					L"HwRwDrvx64.sys"
#define HWRWDRV_OBJ							L"\\\\.\\HwRwDrv"

// WinRing0.sys
#define WINRING0_ID							L"WinRing0_1_2_0"
#define WINRING0_NAME						L"WinRing0.sys"
#define WINRING0_NAME_X64					L"WinRing0x64.sys"
#define WINRING0_OBJ						L"\\\\.\\WinRing0_1_2_0"

// WinRing0 & HwrwDrv
#define IOCTL_OLS_GET_DRIVER_VERSION \
	CTL_CODE(OLS_TYPE, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_OLS_GET_REFCOUNT \
	CTL_CODE(OLS_TYPE, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_OLS_READ_MSR \
	CTL_CODE(OLS_TYPE, 0x821, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_OLS_WRITE_MSR \
	CTL_CODE(OLS_TYPE, 0x822, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_OLS_READ_PMC \
	CTL_CODE(OLS_TYPE, 0x823, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_OLS_HALT \
	CTL_CODE(OLS_TYPE, 0x824, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_OLS_READ_IO_PORT \
	CTL_CODE(OLS_TYPE, 0x831, METHOD_BUFFERED, FILE_READ_ACCESS)

#define IOCTL_OLS_WRITE_IO_PORT \
	CTL_CODE(OLS_TYPE, 0x832, METHOD_BUFFERED, FILE_WRITE_ACCESS)

#define IOCTL_OLS_READ_IO_PORT_BYTE \
	CTL_CODE(OLS_TYPE, 0x833, METHOD_BUFFERED, FILE_READ_ACCESS)

#define IOCTL_OLS_READ_IO_PORT_WORD \
	CTL_CODE(OLS_TYPE, 0x834, METHOD_BUFFERED, FILE_READ_ACCESS)

#define IOCTL_OLS_READ_IO_PORT_DWORD \
	CTL_CODE(OLS_TYPE, 0x835, METHOD_BUFFERED, FILE_READ_ACCESS)

#define IOCTL_OLS_WRITE_IO_PORT_BYTE \
	CTL_CODE(OLS_TYPE, 0x836, METHOD_BUFFERED, FILE_WRITE_ACCESS)

#define IOCTL_OLS_WRITE_IO_PORT_WORD \
	CTL_CODE(OLS_TYPE, 0x837, METHOD_BUFFERED, FILE_WRITE_ACCESS)

#define IOCTL_OLS_WRITE_IO_PORT_DWORD \
	CTL_CODE(OLS_TYPE, 0x838, METHOD_BUFFERED, FILE_WRITE_ACCESS)

#define IOCTL_OLS_READ_MEMORY \
	CTL_CODE(OLS_TYPE, 0x841, METHOD_BUFFERED, FILE_READ_ACCESS)

#define IOCTL_OLS_WRITE_MEMORY \
	CTL_CODE(OLS_TYPE, 0x842, METHOD_BUFFERED, FILE_WRITE_ACCESS)

#define IOCTL_OLS_READ_PCI_CONFIG \
	CTL_CODE(OLS_TYPE, 0x851, METHOD_BUFFERED, FILE_READ_ACCESS)

#define IOCTL_OLS_WRITE_PCI_CONFIG \
	CTL_CODE(OLS_TYPE, 0x852, METHOD_BUFFERED, FILE_WRITE_ACCESS)

// PCI Error Code
#define OLS_ERROR_PCI_BUS_NOT_EXIST		(0xE0000001L)
#define OLS_ERROR_PCI_NO_DEVICE			(0xE0000002L)
#define OLS_ERROR_PCI_WRITE_CONFIG		(0xE0000003L)
#define OLS_ERROR_PCI_READ_CONFIG		(0xE0000004L)

// Bus Number, Device Number and Function Number to PCI Device Address
#define PciBusDevFunc(Bus, Dev, Func)	((Bus&0xFF)<<8) | ((Dev&0x1F)<<3) | (Func&7)
// PCI Device Address to Bus Number
#define PciGetBus(address)				((address>>8) & 0xFF)
// PCI Device Address to Device Number
#define PciGetDev(address)				((address>>3) & 0x1F)
// PCI Device Address to Function Number
#define PciGetFunc(address)				(address&7)

#pragma pack(push,4)

typedef struct _OLS_WRITE_MSR_INPUT
{
	ULONG Register;
	ULARGE_INTEGER Value;
} OLS_WRITE_MSR_INPUT;

typedef struct _OLS_WRITE_IO_PORT_INPUT
{
	ULONG PortNumber;
	union
	{
		ULONG LongData;
		USHORT ShortData;
		UCHAR CharData;
	};
} OLS_WRITE_IO_PORT_INPUT;

typedef struct _OLS_READ_PCI_CONFIG_INPUT
{
	ULONG PciAddress;
	ULONG PciOffset;
} OLS_READ_PCI_CONFIG_INPUT;

typedef struct _OLS_WRITE_PCI_CONFIG_INPUT
{
	ULONG PciAddress;
	ULONG PciOffset;
	UCHAR Data[1];
} OLS_WRITE_PCI_CONFIG_INPUT;

typedef LARGE_INTEGER PHYSICAL_ADDRESS;

typedef struct _OLS_READ_MEMORY_INPUT
{
	PHYSICAL_ADDRESS Address;
	ULONG UnitSize;
	ULONG Count;
} OLS_READ_MEMORY_INPUT;

typedef struct _OLS_WRITE_MEMORY_INPUT
{
	PHYSICAL_ADDRESS Address;
	ULONG UnitSize;
	ULONG Count;
	UCHAR Data[1];
} OLS_WRITE_MEMORY_INPUT;

#pragma pack(pop)

// PawnIO
#define PIO_TYPE 41394

// PawnIO.sys
#define PAWNIO_ID							L"PawnIO"
#define PAWNIO_NAME							L"PawnIO.sys" // PawnIO.sys for x86 is not provided
#define PAWNIO_NAME_X64						L"PawnIOx64.sys"
#define PAWNIO_OBJ							L"\\\\.\\PawnIO"

// PawnIO
#define IOCTL_PIO_GET_REFCOUNT \
	CTL_CODE(PIO_TYPE, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_PIO_LOAD_BINARY \
	CTL_CODE(PIO_TYPE, 0x821, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_PIO_EXECUTE_FN \
	CTL_CODE(PIO_TYPE, 0x841, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define PIO_FN_NAME_LEN 32

#pragma pack(push,1)

typedef struct _PIO_EXEC_INPUT
{
	CHAR Fn[PIO_FN_NAME_LEN];
	ULONG64 Params[0];
} PIO_EXEC_INPUT;

#pragma pack(pop)
