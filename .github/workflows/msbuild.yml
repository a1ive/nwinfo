name: MSBuild

on:
  workflow_dispatch:
  push:
    branches:
      - "master"

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

jobs:
  generate-docs:
    runs-on: ubuntu-latest

    steps:
    - name: Run git checkout
      uses: actions/checkout@v5

    - name: Create PDF
      uses: BaileyJM02/markdown-to-pdf@v1
      with:
        input_path: docs/README.md
        output_dir: build
        images_dir: docs/images
        image_import: ./images
        build_html: false
        table_of_contents: false

    - name: Upload PDF
      uses: actions/upload-artifact@v4
      with:
        name: README.pdf
        path: build/README.pdf

  build:
    runs-on: windows-latest
    needs: generate-docs

    steps:
    - name: Run git checkout
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: |
        msbuild /m /p:Configuration=Release /p:platform=x64 ${{env.SOLUTION_FILE_PATH}}
        msbuild /m /p:Configuration=Release /p:platform=x86 ${{env.SOLUTION_FILE_PATH}}

    - name: Copy files
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        md nwinfo
        move x64\Release\nwinfo.exe nwinfo\nwinfox64.exe
        move x64\Release\gnwinfo.exe nwinfo\gnwinfox64.exe
        move Win32\Release\nwinfo.exe nwinfo\nwinfo.exe
        move Win32\Release\gnwinfo.exe nwinfo\gnwinfo.exe
        copy gnwinfo\gnwinfo.ini nwinfo\gnwinfo.ini
        # copy Win32\Release\ryzenadj.dll nwinfo\ryzenadj.dll
        # copy x64\Release\ryzenadjx64.dll nwinfo\ryzenadjx64.dll
        powershell -ExecutionPolicy Bypass -File .\copy_res.ps1 -TargetFolder nwinfo

    - name: Download README.pdf
      uses: actions/download-artifact@v5
      with:
        name: README.pdf
        path: nwinfo

    # - name: Run UPX
    #   uses: crazy-max/ghaction-upx@v3
    #   with:
    #     version: latest
    #     files: |
    #       .\nwinfo\nwinfox64.exe
    #       .\nwinfo\nwinfo.exe
    #       .\nwinfo\gnwinfox64.exe
    #       .\nwinfo\gnwinfo.exe
    #       .\nwinfo\libcdi.dll
    #       .\nwinfo\libcdix64.dll
    #       .\nwinfo\ryzenadj.dll
    #       .\nwinfo\ryzenadjx64.dll
    #     args: --best

    - name: Create ZIP
      run: Compress-Archive -Path nwinfo/* -DestinationPath "nwinfo.zip"

    - name: Generate Release Notes
      id: generate_notes
      run: |
        $changelogLines = New-Object System.Collections.Generic.List[string]
        if ("${{ github.event_name }}" -eq "push") {
          Write-Host "Generating changelog from push event payload"
          # The JSON payload must be piped to ConvertFrom-Json
          $commits = '${{ toJSON(github.event.commits) }}' | ConvertFrom-Json
          if ($null -ne $commits) {
            foreach ($commit in $commits) {
              $shortSha = $commit.id.Substring(0, 7)
              # Take only the first line of the commit message
              $commitMessage = ($commit.message -split "`r?`n")[0]
              $changelogLines.Add("* $commitMessage ($shortSha) by @$($commit.author.name)")
            }
          }
        }
        else {
          Write-Host "Generating changelog for workflow_dispatch event (latest commit)"
          $latest_commit = git log --pretty=format:'* %s (%h) by @%an' -n 1
          $changelogLines.Add($latest_commit)
        }

        $changelogBody = $changelogLines -join "`n"
        if ([string]::IsNullOrWhiteSpace($changelogBody)) {
          $changelogBody = "No new commits in this push. Automated build from commit ${{ github.sha }}."
        }

        # Use a secure way to create a multi-line environment variable
        $delimiter = "RELEASE_NOTES_$(Get-Random)"
        "CHANGELOG_BODY<<$delimiter" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        $changelogBody | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "$delimiter" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Delete old release
      continue-on-error: true
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        gh release delete latest --cleanup-tag --yes
      env:
        GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

    - name: Release
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        $date_version = (Get-Date -Format 'yyyyMMdd') + ".${{ github.run_number }}"
        gh release create latest "nwinfo.zip" `
          --prerelease `
          --title "Build $date_version" `
          --notes "${{ env.CHANGELOG_BODY }}"
      env:
        GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
